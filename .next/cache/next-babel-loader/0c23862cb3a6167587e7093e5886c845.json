{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/home/oliver/Documents/projects/Unilous/pages/PostFormPage.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { useMutation } from '@apollo/react-hooks';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport '../../static/css/pages/postForm.css';\nimport { palletteGenerator, triggerAlert, useField, websiteStats } from '../src/functions/functions';\nimport { resetAlert, setAlert } from '../src/reducers/alertNotif';\nimport { CREATE_POST } from '../src/schemas/mutations';\n\nlet PostFormPage = props => {\n  _s();\n\n  const title = useField('text');\n  const description = useField('text');\n  const {\n    0: color,\n    1: setColor\n  } = useState(null);\n  const groupContactLink = useField('url');\n  const {\n    0: skillName,\n    1: setSkillName\n  } = useState('');\n  const {\n    0: skillNameList,\n    1: setSkillNameList\n  } = useState([]);\n  const {\n    0: skillCapacity,\n    1: setSkillCapacity\n  } = useState('');\n  const {\n    0: skillCapList,\n    1: setSkillCapList\n  } = useState([]);\n  const {\n    0: imageLink,\n    1: setImageLink\n  } = useState('');\n  const {\n    0: imageLinkList,\n    1: setImageLinkList\n  } = useState([]);\n  const {\n    0: referenceLink,\n    1: setReferenceLink\n  } = useState('');\n  const {\n    0: referenceLinkList,\n    1: setReferenceLinkList\n  } = useState([]);\n  const {\n    0: skillProposition,\n    1: setSkillProposition\n  } = useState(null);\n  const {\n    0: skillSelected,\n    1: setSkillSelected\n  } = useState(null); // This is a test for form validation\n\n  const handleError = e => {\n    const message = e.message;\n\n    if (message.includes('Response not successful')) {\n      triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('Path `title` (')) {\n      triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('dup key: { title')) {\n      triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('duplicate description')) {\n      triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('minimum allowed length')) {\n      triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('Path `description` (')) {\n      triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('duplicate contactLink')) {\n      triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert);\n      return null;\n    }\n  };\n\n  const [createPost] = useMutation(CREATE_POST, {\n    onError: handleError\n  });\n  const pallette = color ? palletteGenerator(color).colorPallette : {\n    color: null,\n    heigherColor: null\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!props.token) {\n      triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!skillNameList.length || !groupContactLink.fields.value.length) {\n      triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    let cleanedTitle = [];\n\n    for (const word of title.fields.value.split(' ')) {\n      if (word.length) cleanedTitle.push(word);\n    }\n\n    const postCreated = await createPost({\n      variables: {\n        title: cleanedTitle.join(' '),\n        user: props.currentUser._id,\n        skillNames: skillNameList,\n        skillCapacities: skillCapList,\n        skillFills: skillProposition,\n        description: description.fields.value,\n        contactLink: groupContactLink.fields.value,\n        color: color,\n        imageLinks: imageLinkList,\n        referenceLinks: referenceLinkList\n      }\n    });\n\n    if (postCreated) {\n      title.reset();\n      description.reset();\n      groupContactLink.reset();\n      setSkillName('');\n      setSkillNameList([]);\n      setSkillCapacity('');\n      setSkillCapList([]);\n      setImageLink('');\n      setImageLinkList([]);\n      setReferenceLink('');\n      setReferenceLinkList([]);\n      props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`);\n    }\n  };\n\n  const colors = ['rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)', 'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', 'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)', 'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'];\n  const colorsHTML = colors.map(c => __jsx(\"div\", {\n    onClick: () => setColor(c),\n    className: \"color-ins\",\n    style: {\n      backgroundColor: c\n    },\n    key: `PFC${c}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 40\n    }\n  }));\n\n  const addSkills = () => {\n    let cleanedSkill = [];\n\n    for (const word of skillName.split(' ')) {\n      if (word.length) cleanedSkill.push(word);\n    }\n\n    setSkillName(cleanedSkill.join(' '));\n\n    if (Number(skillCapacity)) {\n      setSkillNameList(skillNameList.concat(skillName.toLowerCase()));\n      setSkillName('');\n      setSkillCapList(skillCapList.concat(Number(skillCapacity)));\n      setSkillCapacity('');\n      setSkillProposition(null);\n      setSkillSelected(null);\n    }\n  };\n\n  const removeSkill = ind => {\n    const newSkillNameList = [];\n\n    for (const i in skillNameList) {\n      if (i !== ind) {\n        newSkillNameList.push(skillNameList[i]);\n      }\n    }\n\n    setSkillNameList(newSkillNameList);\n    const newSkillCapList = [];\n\n    for (const i in skillCapList) {\n      if (i !== ind) {\n        newSkillCapList.push(skillCapList[i]);\n      }\n    }\n\n    setSkillCapList(newSkillCapList);\n    const newSkillProposition = [];\n\n    for (const i in props.skillProposition) {\n      if (i !== ind) {\n        newSkillProposition.push(props.skillProposition[i]);\n      }\n    }\n  };\n\n  const removeImage = ind => {\n    const newImageLinkList = [];\n\n    for (const i in imageLinkList) {\n      if (i !== ind) {\n        newImageLinkList.push(imageLinkList[i]);\n      }\n    }\n\n    setImageLinkList(newImageLinkList);\n  };\n\n  const addImage = () => {\n    if (imageLink.includes('https://') || imageLink.includes('http://')) {\n      setImageLinkList(imageLinkList.concat(imageLink));\n      setImageLink('');\n    }\n  };\n\n  const removeRL = ind => {\n    const newReferenceLinkList = [];\n\n    for (const i in referenceLinkList) {\n      if (i !== ind) {\n        newReferenceLinkList.push(referenceLinkList[i]);\n      }\n    }\n\n    setReferenceLinkList(newReferenceLinkList);\n  };\n\n  const addRL = () => {\n    if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\n      setReferenceLinkList(referenceLinkList.concat(referenceLink));\n      setReferenceLink('');\n    }\n  };\n\n  const skillsHTML = () => {\n    let skillsHTML = [];\n\n    for (const ind in skillNameList) {\n      skillsHTML.push(__jsx(\"div\", {\n        className: \"PF-skill-wrapper\",\n        key: `PFS${skillNameList[ind]}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: \"PF-skill-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: \"PF-skill-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }\n      }, skillNameList[ind]), __jsx(\"div\", {\n        className: \"PF-skill-cap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }\n      }, skillCapList[ind])), __jsx(\"div\", {\n        className: \"PF-skill-remove\",\n        onClick: () => removeSkill(ind),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }\n      }, \"x\")));\n    }\n\n    return skillsHTML;\n  };\n\n  const skillContribution = () => {\n    if (!skillNameList.length) {\n      return __jsx(\"h4\", {\n        className: \"PF-input-title\",\n        style: {\n          opacity: 0.7\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 20\n        }\n      }, \"must add skill first\");\n    }\n\n    const handleSkillSelect = i => {\n      const skillArray = Array(skillNameList.length).fill(0);\n      skillArray[i] = 1;\n      setSkillProposition(skillArray);\n      setSkillSelected(skillNameList[i]);\n    };\n\n    const skillMap = [];\n\n    for (const i in skillNameList) {\n      const skillClass = skillSelected === skillNameList[i] ? 'skill-selected' : 'skill-normal';\n      skillMap.push(__jsx(\"h4\", {\n        onClick: () => handleSkillSelect(i, skillNameList[i]),\n        className: skillClass,\n        key: `SKILL${i}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }\n      }, skillNameList[i]));\n    }\n\n    return __jsx(\"div\", {\n      className: \"skills-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, skillMap);\n  };\n\n  const imagesHTML = () => {\n    const allImages = [];\n\n    for (const ind in imageLinkList) {\n      allImages.push(__jsx(\"div\", {\n        className: \"PF-image-display-container\",\n        key: `IL${ind}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }\n      }, __jsx(\"img\", {\n        className: \"PF-image-display\",\n        src: imageLinkList[ind],\n        alt: `(${imageLinkList[ind]}) failed to load`,\n        key: `IL${imageLinkList[ind]}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }\n      }), __jsx(\"div\", {\n        onClick: () => removeImage(ind),\n        className: \"PF-skill-remove\",\n        style: {\n          height: '75px',\n          lineHeight: '70px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }\n      }, \"x\")));\n    }\n\n    return allImages.map(img => img);\n  };\n\n  const referenceLinksHTML = () => {\n    const allRL = [];\n\n    for (const ind in referenceLinkList) {\n      allRL.push(__jsx(\"div\", {\n        className: \"PF-link-container\",\n        key: `RL${ind}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        href: referenceLinkList[ind],\n        className: \"PF-reference-link neutralize-link\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }\n      }, referenceLinkList[ind].split('/')[2]), __jsx(\"div\", {\n        onClick: () => removeRL(ind),\n        className: \"PF-skill-remove\",\n        style: {\n          lineHeight: '30px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }\n      }, \"x\")));\n    }\n\n    return allRL.map(rl => rl);\n  };\n\n  const groupCommType = () => {\n    const siteStats = websiteStats(groupContactLink.fields.value);\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    }, __jsx(\"a\", {\n      className: \"GCL-type\",\n      href: groupContactLink.fields.value,\n      title: siteStats.title,\n      style: {\n        backgroundColor: siteStats.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }, __jsx(\"img\", {\n      className: \"GCL-image\",\n      src: siteStats.icon,\n      alt: siteStats.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 145\n      }\n    })), __jsx(\"input\", _extends({\n      className: \"PF-search-input-normal\",\n      id: \"PF-GC-Link\"\n    }, groupContactLink.fields, {\n      style: {\n        marginBottom: 0,\n        borderColor: siteStats.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    })));\n  };\n\n  const signInWarning = props.token ? null : __jsx(\"h3\", {\n    className: \"warning-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }, \"must be signed in to add post\");\n\n  const onSuggestionClicked = skill => {\n    const skillToEnter = `${skill} `;\n    setSkillName(skillToEnter);\n  };\n\n  return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }\n  }, \"PostFormPage.js\") // <div className=\"post-form0-container\">\n  //     <div className=\"navbar-height\" />\n  //     {signInWarning}\n  //     <form onSubmit={(e) => handleSubmit(e)}>\n  //         <div className=\"post-form0-form\">\n  //             <h1 className=\"pp-form-title\" style={{textAlign: 'start', marginLeft: 0}}>create post</h1>\n  //             <InputHeader info={false} title=\"title\" color=\"white\" inputFor=\"PF-title\" />\n  //             <input className=\"PF-search-input\" id=\"PF-title\" {...title.fields} />\n  //             <InputHeader info={true} title=\"description\" color=\"white\" inputFor=\"PF-description\" >\n  //                 <ul style={{margin: 0}}>\n  //                     <li>any links starting with (https://) or (http://) get decorated like this <a href=\"https://www.unilous.com/post-form/\" className=\"p-link neutralize-link\">http://decorated-link.com</a></li>\n  //                 </ul>\n  //             </InputHeader>\n  //             <textarea className=\"PF-search-input\" id=\"PF-description\" {...description.fields}  style={{height: '100px', width: '100%'}} />\n  //             <InputHeader info={true} title=\"color\" color=\"white\" inputFor=\"\">\n  //                 <ul style={{margin: 0}}>\n  //                     <li>used sparingly to decorate the post</li>\n  //                 </ul>\n  //             </InputHeader>\n  //             <div className=\"PF-display-color\" style={{backgroundColor: pallette.color}} >\n  //                 <div className=\"PF-display-part\" style={{backgroundColor: pallette.color, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>primary</h4></div>\n  //                 <div className=\"PF-display-part\" style={{backgroundColor: pallette.higherColor, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>secondary</h4></div>\n  //             </div>\n  //             <div className=\"PF-input-colors\">\n  //                 {colorsHTML}\n  //             </div>\n  //             <InputHeader info={true} title=\"skills\" color=\"white\" inputFor=\"PF-skillName\">\n  //                 <p style={{margin: 0, marginBottom: '5px'}}>skills needed to execute the project</p>\n  //                 <p style={{margin: 0, marginBottom: '5px'}}>amount of people needed per skill</p>\n  //             </InputHeader>\n  //             <div>\n  //                 <div className=\"PF-skill-fields\">\n  //                     <input className=\"PF-search-input\" placeholder=\"skill name\" id=\"PF-skillName\" value={skillName} onChange={(e) => setSkillName(e.target.value)} type=\"text\" style={{marginBottom: 0}} />\n  //                     <input className=\"PF-search-input\" placeholder=\"amount of help\" value={skillCapacity} onChange={(e) => setSkillCapacity(e.target.value)} type=\"number\" style={{marginBottom: 0}} />\n  //                     <div className=\"PF-skill-sugg-container\">\n  //                         <SkillSugg query={skillName} onSuggestionClicked={onSuggestionClicked} style={{gridColumn: '1/2'}} />\n  //                     </div>\n  //                 </div>\n  //                 <h4 onClick={() => addSkills()} className=\"PF-field-submit standard-hover\">add skill</h4>               \n  //             </div>\n  //             {skillsHTML().map(s => s)}\n  //             <InputHeader info={true} title=\"contribution\" color=\"white\" inputFor=\"\">\n  //                 <p style={{margin: 0, marginBottom: '5px'}}>skill you contribute to the project</p>\n  //             </InputHeader>\n  //             {skillContribution()}\n  //             <InputHeader info={true} title=\"group/contact link\" color=\"white\" inputFor=\"PF-GC-Link\">\n  //                 <p style={{margin: 0, marginBottom: '5px'}}>link shown to users who have been accepted to join the project</p>\n  //                 <ul style={{margin: 0}}>\n  //                     <li>group links recommended: <strong>Slack</strong>, <strong>Trello</strong>, <strong>Discord</strong>, or <strong>WhatsApp</strong></li>\n  //                 </ul>\n  //             </InputHeader>\n  //             <div className=\"GCL-input\">\n  //                 {groupCommType()}\n  //             </div>\n  //             <InputHeader info={false} title=\"images\" color=\"white\" inputFor=\"PF-imageLinks\" />\n  //             <input className=\"PF-search-input\" type=\"url\" placeholder=\"image link\" id=\"PF-imageLinks\" value={imageLink} onChange={(e) => setImageLink(e.target.value)} style={{marginBottom: 0}} />\n  //             <h4 onClick={() => addImage()} className=\"PF-field-submit standard-hover\">add image</h4>\n  //             <div className=\"PF-images-container\">\n  //                 {imagesHTML()}\n  //             </div>\n  //             <InputHeader info={false} title=\"links\" color=\"white\" inputFor=\"PF-referenceLinks\" />\n  //             <input className=\"PF-search-input\" type=\"url\" id=\"PF-referenceLinks\" value={referenceLink} onChange={(e) => setReferenceLink(e.target.value)} style={{marginBottom: 0}} />\n  //             <h4 onClick={() => addRL()} className=\"PF-field-submit standard-hover\">add link</h4>\n  //             {referenceLinksHTML()}\n  //         </div>\n  //         <button type=\"submit\" className=\"PF-submit standard-hover\"><h2 style={{margin: '5px'}}>create post</h2></button>\n  //     </form>\n  // </div>\n  ;\n};\n\n_s(PostFormPage, \"H7X3Slidx9/2/4yTTqOwZ/fGBYc=\", false, function () {\n  return [useField, useField, useField, useMutation];\n});\n\n_c = PostFormPage;\nPostFormPage = withRouter(PostFormPage);\n\nconst mapStateToProps = state => {\n  return {\n    skillProposition: state.skillProposition,\n    currentUser: state.currentUser,\n    token: state.token\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  resetAlert\n})(PostFormPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostFormPage\");","map":{"version":3,"sources":["/home/oliver/Documents/projects/Unilous/pages/PostFormPage.js"],"names":["useMutation","React","useState","connect","withRouter","palletteGenerator","triggerAlert","useField","websiteStats","resetAlert","setAlert","CREATE_POST","PostFormPage","props","title","description","color","setColor","groupContactLink","skillName","setSkillName","skillNameList","setSkillNameList","skillCapacity","setSkillCapacity","skillCapList","setSkillCapList","imageLink","setImageLink","imageLinkList","setImageLinkList","referenceLink","setReferenceLink","referenceLinkList","setReferenceLinkList","skillProposition","setSkillProposition","skillSelected","setSkillSelected","handleError","e","message","includes","fields","value","length","createPost","onError","pallette","colorPallette","heigherColor","handleSubmit","preventDefault","token","cleanedTitle","word","split","push","postCreated","variables","join","user","currentUser","_id","skillNames","skillCapacities","skillFills","contactLink","imageLinks","referenceLinks","reset","history","encodeURIComponent","data","addPost","colors","colorsHTML","map","c","backgroundColor","addSkills","cleanedSkill","Number","concat","toLowerCase","removeSkill","ind","newSkillNameList","i","newSkillCapList","newSkillProposition","removeImage","newImageLinkList","addImage","removeRL","newReferenceLinkList","addRL","skillsHTML","skillContribution","opacity","handleSkillSelect","skillArray","Array","fill","skillMap","skillClass","imagesHTML","allImages","height","lineHeight","img","referenceLinksHTML","allRL","rl","groupCommType","siteStats","icon","marginBottom","borderColor","signInWarning","onSuggestionClicked","skill","skillToEnter","mapStateToProps","state"],"mappings":"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","sourcesContent":["import { useMutation } from '@apollo/react-hooks';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport '../../static/css/pages/postForm.css';\nimport { palletteGenerator, triggerAlert, useField, websiteStats } from '../src/functions/functions';\nimport { resetAlert, setAlert } from '../src/reducers/alertNotif';\nimport { CREATE_POST } from '../src/schemas/mutations';\n\nlet PostFormPage = (props) => {\n    const title = useField('text')\n    const description = useField('text')\n    const [color, setColor] = useState(null)\n    const groupContactLink = useField('url')\n\n    const [skillName, setSkillName] = useState('')\n    const [skillNameList, setSkillNameList] = useState([])\n    const [skillCapacity, setSkillCapacity] = useState('')\n    const [skillCapList, setSkillCapList] = useState([])\n    const [imageLink, setImageLink] = useState('')\n    const [imageLinkList, setImageLinkList] = useState([])\n    const [referenceLink, setReferenceLink] = useState('')\n    const [referenceLinkList, setReferenceLinkList] = useState([])\n\n    const [skillProposition, setSkillProposition] = useState(null)\n    const [skillSelected, setSkillSelected] = useState(null)\n    // This is a test for form validation\n    const handleError = (e) => {\n        const message = e.message\n        if (message.includes('Response not successful')) {\n           triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n           return null \n        }\n        if (message.includes('Path `title` (')) {\n            triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert)\n            return null\n        }\n        if (message.includes('dup key: { title')) {\n            triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert)\n            return null\n        }\n        if (message.includes('duplicate description')) {\n            triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert)\n            return null\n        }\n        if (message.includes('minimum allowed length')) {\n            triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert)\n            return null\n        }\n        if (message.includes('Path `description` (')) {\n            triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert)\n            return null\n        }\n        if (message.includes('duplicate contactLink')) {\n            triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert)\n            return null\n        }\n    }\n    const [createPost] = useMutation( CREATE_POST, {\n        onError: handleError\n    })\n    const pallette = color ? palletteGenerator(color).colorPallette : {color: null, heigherColor: null}\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n        if (!props.token) {\n            triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\n            return null\n        }\n        if (!skillNameList.length || !groupContactLink.fields.value.length) {\n            triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n            return null\n        }\n        let cleanedTitle = []\n        for (const word of title.fields.value.split(' ')) {\n            if (word.length) cleanedTitle.push(word)\n        }\n        const postCreated = await createPost({\n            variables: {\n                title: cleanedTitle.join(' '),\n                user: props.currentUser._id,\n                skillNames: skillNameList,\n                skillCapacities: skillCapList,\n                skillFills: skillProposition,\n                description: description.fields.value,\n                contactLink: groupContactLink.fields.value,\n                color: color,\n                imageLinks: imageLinkList,\n                referenceLinks: referenceLinkList\n            }\n        })\n        if (postCreated) {\n            title.reset()\n            description.reset()\n            groupContactLink.reset()\n            setSkillName('')\n            setSkillNameList([])\n            setSkillCapacity('')\n            setSkillCapList([])\n            setImageLink('')\n            setImageLinkList([])\n            setReferenceLink('')\n            setReferenceLinkList([])\n            props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`)\n        }\n    }\n    const colors = [\n        'rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)',\n        'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', \n        'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)',  \n        'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'\n    ]\n    const colorsHTML = colors.map(c => <div onClick={() => setColor(c)} className=\"color-ins\" style={{backgroundColor: c}} key={`PFC${c}`} />)\n    const addSkills = () => {\n        let cleanedSkill = []\n        for (const word of skillName.split(' ')) {\n            if (word.length) cleanedSkill.push(word)\n        }\n        setSkillName(cleanedSkill.join(' '))\n        if (Number(skillCapacity)){\n            setSkillNameList(skillNameList.concat(skillName.toLowerCase()))\n            setSkillName('')\n            setSkillCapList(skillCapList.concat(Number(skillCapacity)))\n            setSkillCapacity('')\n            setSkillProposition(null)\n            setSkillSelected(null)\n        }\n    }\n    const removeSkill = (ind) => {\n        const newSkillNameList = []\n        for (const i in skillNameList) {\n            if (i !== ind) { newSkillNameList.push(skillNameList[i]) }\n        }\n        setSkillNameList(newSkillNameList)\n        const newSkillCapList = []\n        for (const i in skillCapList) {\n            if (i !== ind) { newSkillCapList.push(skillCapList[i]) }\n        }\n        setSkillCapList(newSkillCapList)\n        const newSkillProposition = []\n        for (const i in props.skillProposition) {\n            if (i !== ind) { newSkillProposition.push(props.skillProposition[i]) }\n        }\n    }\n    \n    const removeImage = (ind) => {\n        const newImageLinkList = []\n        for (const i in imageLinkList) {\n            if (i !== ind) { newImageLinkList.push(imageLinkList[i]) }\n        }\n        setImageLinkList(newImageLinkList)\n    }\n    \n    const addImage = () => {\n        if (imageLink.includes('https://') || imageLink.includes('http://')) {\n            setImageLinkList(imageLinkList.concat(imageLink))\n            setImageLink('')\n        }\n    }\n\n    const removeRL = (ind) => {\n        const newReferenceLinkList = []\n        for (const i in referenceLinkList) {\n            if (i !== ind) { newReferenceLinkList.push(referenceLinkList[i]) }\n        }\n        setReferenceLinkList(newReferenceLinkList)\n    }\n\n    const addRL = () => {\n        if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\n            setReferenceLinkList(referenceLinkList.concat(referenceLink))\n            setReferenceLink('')\n        }\n    }\n\n    const skillsHTML = () => {\n        let skillsHTML = []\n        for (const ind in skillNameList) {\n            skillsHTML.push(\n                <div className=\"PF-skill-wrapper\" key={`PFS${skillNameList[ind]}`}>\n                    <div className=\"PF-skill-container\">\n                        <div className=\"PF-skill-name\">{skillNameList[ind]}</div>\n                        <div className=\"PF-skill-cap\">{skillCapList[ind]}</div>\n                    </div>\n                    <div className=\"PF-skill-remove\" onClick={() => removeSkill(ind)}>x</div>\n                </div>\n            )\n        }\n        return skillsHTML\n    }\n\n    const skillContribution = () => {\n        if (!skillNameList.length) {\n            return <h4 className=\"PF-input-title\" style={{opacity: 0.7}}>must add skill first</h4>\n        }\n\n        const handleSkillSelect = (i) => {\n            const skillArray = Array(skillNameList.length).fill(0)\n            skillArray[i] = 1\n            setSkillProposition(skillArray)\n            setSkillSelected(skillNameList[i])\n        }\n\n        const skillMap = []\n        for (const i in skillNameList) {\n            const skillClass = skillSelected === skillNameList[i] ?\n                'skill-selected' : 'skill-normal'\n            skillMap.push(\n                <h4 onClick={() => handleSkillSelect(i, skillNameList[i])} className={skillClass} key={`SKILL${i}`}>{skillNameList[i]}</h4>\n            )\n        }\n\n        return (\n            <div className=\"skills-container\">\n                {skillMap}\n            </div>\n        )\n    }\n\n    const imagesHTML = () => {\n        const allImages = []\n        for (const ind in imageLinkList) {\n            allImages.push(\n                <div className=\"PF-image-display-container\" key={`IL${ind}`}>\n                    <img className=\"PF-image-display\" src={imageLinkList[ind]} alt={`(${imageLinkList[ind]}) failed to load`} key={`IL${imageLinkList[ind]}`} />\n                    <div onClick={() => removeImage(ind)} className=\"PF-skill-remove\" style={{height: '75px', lineHeight: '70px'}} >x</div>\n                </div>\n            )\n        }\n        return allImages.map(img => img)\n    }\n\n    const referenceLinksHTML = () => {\n        const allRL = []\n        for (const ind in referenceLinkList) {\n            allRL.push(\n                <div className=\"PF-link-container\" key={`RL${ind}`}>\n                    <a href={referenceLinkList[ind]} className=\"PF-reference-link neutralize-link\">{referenceLinkList[ind].split('/')[2]}</a>\n                    <div onClick={() => removeRL(ind)} className=\"PF-skill-remove\" style={{lineHeight: '30px'}}>x</div>\n                </div>\n            )\n        }\n        return allRL.map(rl => rl)\n    }\n    const groupCommType = () => {\n        const siteStats = websiteStats(groupContactLink.fields.value)\n        return (\n            <React.Fragment>\n                <a className=\"GCL-type\" href={groupContactLink.fields.value} title={siteStats.title} style={{backgroundColor: siteStats.color}}><img className=\"GCL-image\" src={siteStats.icon} alt={siteStats.title} /></a>\n                <input className=\"PF-search-input-normal\" id=\"PF-GC-Link\" {...groupContactLink.fields} style={{marginBottom: 0, borderColor: siteStats.color}} />\n            </React.Fragment>\n        )\n    }\n    const signInWarning = props.token ? null : (\n        <h3 className=\"warning-container\">must be signed in to add post</h3>\n    )\n    const onSuggestionClicked = (skill) => {\n        const skillToEnter = `${skill} `\n        setSkillName(skillToEnter)\n    }\n    return (\n        <h1>PostFormPage.js</h1>\n        // <div className=\"post-form0-container\">\n        //     <div className=\"navbar-height\" />\n        //     {signInWarning}\n        //     <form onSubmit={(e) => handleSubmit(e)}>\n        //         <div className=\"post-form0-form\">\n        //             <h1 className=\"pp-form-title\" style={{textAlign: 'start', marginLeft: 0}}>create post</h1>\n        //             <InputHeader info={false} title=\"title\" color=\"white\" inputFor=\"PF-title\" />\n        //             <input className=\"PF-search-input\" id=\"PF-title\" {...title.fields} />\n        //             <InputHeader info={true} title=\"description\" color=\"white\" inputFor=\"PF-description\" >\n        //                 <ul style={{margin: 0}}>\n        //                     <li>any links starting with (https://) or (http://) get decorated like this <a href=\"https://www.unilous.com/post-form/\" className=\"p-link neutralize-link\">http://decorated-link.com</a></li>\n        //                 </ul>\n        //             </InputHeader>\n        //             <textarea className=\"PF-search-input\" id=\"PF-description\" {...description.fields}  style={{height: '100px', width: '100%'}} />\n        //             <InputHeader info={true} title=\"color\" color=\"white\" inputFor=\"\">\n        //                 <ul style={{margin: 0}}>\n        //                     <li>used sparingly to decorate the post</li>\n        //                 </ul>\n        //             </InputHeader>\n        //             <div className=\"PF-display-color\" style={{backgroundColor: pallette.color}} >\n        //                 <div className=\"PF-display-part\" style={{backgroundColor: pallette.color, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>primary</h4></div>\n        //                 <div className=\"PF-display-part\" style={{backgroundColor: pallette.higherColor, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>secondary</h4></div>\n        //             </div>\n        //             <div className=\"PF-input-colors\">\n        //                 {colorsHTML}\n        //             </div>\n        //             <InputHeader info={true} title=\"skills\" color=\"white\" inputFor=\"PF-skillName\">\n        //                 <p style={{margin: 0, marginBottom: '5px'}}>skills needed to execute the project</p>\n        //                 <p style={{margin: 0, marginBottom: '5px'}}>amount of people needed per skill</p>\n        //             </InputHeader>\n        //             <div>\n        //                 <div className=\"PF-skill-fields\">\n        //                     <input className=\"PF-search-input\" placeholder=\"skill name\" id=\"PF-skillName\" value={skillName} onChange={(e) => setSkillName(e.target.value)} type=\"text\" style={{marginBottom: 0}} />\n        //                     <input className=\"PF-search-input\" placeholder=\"amount of help\" value={skillCapacity} onChange={(e) => setSkillCapacity(e.target.value)} type=\"number\" style={{marginBottom: 0}} />\n        //                     <div className=\"PF-skill-sugg-container\">\n        //                         <SkillSugg query={skillName} onSuggestionClicked={onSuggestionClicked} style={{gridColumn: '1/2'}} />\n        //                     </div>\n        //                 </div>\n        //                 <h4 onClick={() => addSkills()} className=\"PF-field-submit standard-hover\">add skill</h4>               \n        //             </div>\n        //             {skillsHTML().map(s => s)}\n        //             <InputHeader info={true} title=\"contribution\" color=\"white\" inputFor=\"\">\n        //                 <p style={{margin: 0, marginBottom: '5px'}}>skill you contribute to the project</p>\n        //             </InputHeader>\n        //             {skillContribution()}\n        //             <InputHeader info={true} title=\"group/contact link\" color=\"white\" inputFor=\"PF-GC-Link\">\n        //                 <p style={{margin: 0, marginBottom: '5px'}}>link shown to users who have been accepted to join the project</p>\n        //                 <ul style={{margin: 0}}>\n        //                     <li>group links recommended: <strong>Slack</strong>, <strong>Trello</strong>, <strong>Discord</strong>, or <strong>WhatsApp</strong></li>\n        //                 </ul>\n        //             </InputHeader>\n        //             <div className=\"GCL-input\">\n        //                 {groupCommType()}\n        //             </div>\n        //             <InputHeader info={false} title=\"images\" color=\"white\" inputFor=\"PF-imageLinks\" />\n        //             <input className=\"PF-search-input\" type=\"url\" placeholder=\"image link\" id=\"PF-imageLinks\" value={imageLink} onChange={(e) => setImageLink(e.target.value)} style={{marginBottom: 0}} />\n        //             <h4 onClick={() => addImage()} className=\"PF-field-submit standard-hover\">add image</h4>\n        //             <div className=\"PF-images-container\">\n        //                 {imagesHTML()}\n        //             </div>\n        //             <InputHeader info={false} title=\"links\" color=\"white\" inputFor=\"PF-referenceLinks\" />\n        //             <input className=\"PF-search-input\" type=\"url\" id=\"PF-referenceLinks\" value={referenceLink} onChange={(e) => setReferenceLink(e.target.value)} style={{marginBottom: 0}} />\n        //             <h4 onClick={() => addRL()} className=\"PF-field-submit standard-hover\">add link</h4>\n        //             {referenceLinksHTML()}\n        //         </div>\n        //         <button type=\"submit\" className=\"PF-submit standard-hover\"><h2 style={{margin: '5px'}}>create post</h2></button>\n        //     </form>\n        // </div>\n    )\n}\n\nPostFormPage = withRouter(PostFormPage)\n\nconst mapStateToProps = (state) => {\n\treturn {\n        skillProposition: state.skillProposition,\n        currentUser: state.currentUser,\n        token: state.token\n\t}\n}\nexport default connect(\n    mapStateToProps,\n    { setAlert, resetAlert }\n)(PostFormPage)"]},"metadata":{},"sourceType":"module"}