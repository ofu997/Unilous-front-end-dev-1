{"ast":null,"code":"var _jsxFileName = \"/home/oliver/Documents/projects/Unilous/pages/UserPage.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\n\nconst UserPage = props => {\n  //   const [currentUser, setCurrentUser] = useState(null)\n  //   const message = useField('text')\n  //   const decodedUser = decodeURIComponent(props.userUsername)\n  //   const userQuery = useQuery(FIND_USER, {\n  //     variables: {username: decodedUser}\n  //   })\n  //   const onError = (e) => {\n  //     const eMessage = e.message\n  //     if (eMessage.includes('Path `message` (')) {\n  //       triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\n  //     }\n  //   }\n  //   const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n  //     onError\n  //   })\n  //   const handleMessage = async () => {\n  //     if (!message.fields.value.length) {\n  //       triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\n  //       return null\n  //     }\n  //     const result = await sendMessage({\n  //         variables: {\n  //             userFromId: props.currentUser._id,\n  //             userToId: currentUser._id,\n  //             message: message.fields.value,\n  //         }\n  //     })\n  //     if (result) {\n  //         message.reset()\n  //         triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n  //   const userConditions = () => {\n  //     const query = userQuery.data\n  //     const reducer = currentUser\n  //     if (!query) return null\n  //     if (!query.findUser) return null\n  //     if (!reducer || reducer.username !== query.username) return query.findUser\n  //     return null\n  //   }\n  //   const user = userConditions()\n  //   useEffect(() => {\n  //     if (user) {\n  //       setCurrentUser(user)\n  //     }\n  //   }, [user, setCurrentUser])\n  //   if (!currentUser) {\n  //     return (\n  //       <div>\n  //           <div style={{height: '15vh'}}/>\n  //           <Loading />\n  //       </div>\n  //     )\n  //   }\n  //   const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\n  return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"UserPage.js\") // <div className=\"userPage-container\">\n  //   <div className=\"navbar-height\" style={{gridColumn: '1/3'}} />\n  //   <div className=\"UP-content\">\n  //     <div className=\"UP-title-container\">\n  //       <img className=\"UP-title-icon\" src={userIcon} alt=\"user\" />\n  //       <h2 className=\"UP-title\">{currentUser.username}</h2>\n  //     </div>\n  //     <h3 className=\"UP-title\" style={{opacity: '0.8'}}>profile link</h3>\n  //     <ReferenceLink rl={currentUser.referenceLink} />\n  //     <h2 className=\"UP-title\">posts</h2>\n  //     <div className=\"UP-posts-container\">\n  //       <PostSmallList posts={currentUser.posts} />\n  //     </div>\n  //   </div>\n  //     <FormContainer pallette={pallette} >\n  //           <h3 className=\"form-title\">contact {currentUser.username}</h3>\n  //           <h4 className=\"form-title-secondary\">message</h4>\n  //           <div className=\"form-field-container\">\n  //             <textarea className=\"form-field\" {...message.fields} />\n  //           </div >\n  //           <div className=\"form-submit-button-container\">\n  //           <h4 onClick={() => handleMessage()} className=\"form-submit-button\">send</h4>\n  //           </div>\n  //     </FormContainer>\n  // </div>\n  ;\n}; // const mapStateToProps = (state) => {\n// \treturn {\n//     currentUser: state.currentUser        \n// \t}\n// }\n// export default connect(\n//   mapStateToProps,\n//   {setAlert, resetAlert}\n// )(UserPage)\n\n\nexport default UserPage;","map":{"version":3,"sources":["/home/oliver/Documents/projects/Unilous/pages/UserPage.js"],"names":["React","UserPage","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3BJ;AA6BH,CAvFD,C,CAyFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeD,QAAf","sourcesContent":["import React from 'react'\n\nconst UserPage = (props) => {\n  //   const [currentUser, setCurrentUser] = useState(null)\n  //   const message = useField('text')\n  //   const decodedUser = decodeURIComponent(props.userUsername)\n  //   const userQuery = useQuery(FIND_USER, {\n  //     variables: {username: decodedUser}\n  //   })\n  //   const onError = (e) => {\n  //     const eMessage = e.message\n  //     if (eMessage.includes('Path `message` (')) {\n  //       triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\n  //     }\n  //   }\n  //   const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n  //     onError\n  //   })\n  //   const handleMessage = async () => {\n  //     if (!message.fields.value.length) {\n  //       triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\n  //       return null\n  //     }\n  //     const result = await sendMessage({\n  //         variables: {\n  //             userFromId: props.currentUser._id,\n  //             userToId: currentUser._id,\n  //             message: message.fields.value,\n  //         }\n  //     })\n  //     if (result) {\n  //         message.reset()\n  //         triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n\n  //   const userConditions = () => {\n  //     const query = userQuery.data\n  //     const reducer = currentUser\n  //     if (!query) return null\n  //     if (!query.findUser) return null\n  //     if (!reducer || reducer.username !== query.username) return query.findUser\n  //     return null\n  //   }\n\n  //   const user = userConditions()\n  //   useEffect(() => {\n  //     if (user) {\n  //       setCurrentUser(user)\n  //     }\n  //   }, [user, setCurrentUser])\n  //   if (!currentUser) {\n  //     return (\n  //       <div>\n  //           <div style={{height: '15vh'}}/>\n  //           <Loading />\n  //       </div>\n  //     )\n  //   }\n  //   const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\n    return (\n      <h1>UserPage.js</h1>\n        // <div className=\"userPage-container\">\n        //   <div className=\"navbar-height\" style={{gridColumn: '1/3'}} />\n        //   <div className=\"UP-content\">\n        //     <div className=\"UP-title-container\">\n        //       <img className=\"UP-title-icon\" src={userIcon} alt=\"user\" />\n        //       <h2 className=\"UP-title\">{currentUser.username}</h2>\n        //     </div>\n        //     <h3 className=\"UP-title\" style={{opacity: '0.8'}}>profile link</h3>\n        //     <ReferenceLink rl={currentUser.referenceLink} />\n        //     <h2 className=\"UP-title\">posts</h2>\n        //     <div className=\"UP-posts-container\">\n        //       <PostSmallList posts={currentUser.posts} />\n        //     </div>\n        //   </div>\n        //     <FormContainer pallette={pallette} >\n        //           <h3 className=\"form-title\">contact {currentUser.username}</h3>\n        //           <h4 className=\"form-title-secondary\">message</h4>\n        //           <div className=\"form-field-container\">\n        //             <textarea className=\"form-field\" {...message.fields} />\n        //           </div >\n        //           <div className=\"form-submit-button-container\">\n                    \n        //           <h4 onClick={() => handleMessage()} className=\"form-submit-button\">send</h4>\n        //           </div>\n        //     </FormContainer>\n        // </div>\n    )\n}\n\n// const mapStateToProps = (state) => {\n// \treturn {\n//     currentUser: state.currentUser        \n// \t}\n// }\n// export default connect(\n//   mapStateToProps,\n//   {setAlert, resetAlert}\n// )(UserPage)\n\nexport default UserPage; "]},"metadata":{},"sourceType":"module"}