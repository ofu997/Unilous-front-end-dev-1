{"ast":null,"code":"var _jsxFileName = \"/home/oliver/Documents/projects/Unilous-front-end-dev-1/pages/PostFormPage.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PFP from '../styles/pages/postForm.module.css';\n\nlet PostFormPage = props => {\n  // const title = useField('text')\n  // const description = useField('text')\n  // const [color, setColor] = useState(null)\n  // const groupContactLink = useField('url')\n  // const [skillName, setSkillName] = useState('')\n  // const [skillNameList, setSkillNameList] = useState([])\n  // const [skillCapacity, setSkillCapacity] = useState('')\n  // const [skillCapList, setSkillCapList] = useState([])\n  // const [imageLink, setImageLink] = useState('')\n  // const [imageLinkList, setImageLinkList] = useState([])\n  // const [referenceLink, setReferenceLink] = useState('')\n  // const [referenceLinkList, setReferenceLinkList] = useState([])\n  // const [skillProposition, setSkillProposition] = useState(null)\n  // const [skillSelected, setSkillSelected] = useState(null)\n  // // This is a test for form validation\n  // const handleError = (e) => {\n  //     const message = e.message\n  //     if (message.includes('Response not successful')) {\n  //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n  //         return null \n  //     }\n  //     if (message.includes('Path `title` (')) {\n  //         triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('dup key: { title')) {\n  //         triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('duplicate description')) {\n  //         triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('minimum allowed length')) {\n  //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('Path `description` (')) {\n  //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('duplicate contactLink')) {\n  //         triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  // }\n  // const [createPost] = useMutation( CREATE_POST, {\n  //     onError: handleError\n  // })\n  // const pallette = color ? palletteGenerator(color).colorPallette : {color: null, heigherColor: null}\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault()\n  //     if (!props.token) {\n  //         triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (!skillNameList.length || !groupContactLink.fields.value.length) {\n  //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     let cleanedTitle = []\n  //     for (const word of title.fields.value.split(' ')) {\n  //         if (word.length) cleanedTitle.push(word)\n  //     }\n  //     const postCreated = await createPost({\n  //         variables: {\n  //             title: cleanedTitle.join(' '),\n  //             user: props.currentUser._id,\n  //             skillNames: skillNameList,\n  //             skillCapacities: skillCapList,\n  //             skillFills: skillProposition,\n  //             description: description.fields.value,\n  //             contactLink: groupContactLink.fields.value,\n  //             color: color,\n  //             imageLinks: imageLinkList,\n  //             referenceLinks: referenceLinkList\n  //         }\n  //     })\n  //     if (postCreated) {\n  //         title.reset()\n  //         description.reset()\n  //         groupContactLink.reset()\n  //         setSkillName('')\n  //         setSkillNameList([])\n  //         setSkillCapacity('')\n  //         setSkillCapList([])\n  //         setImageLink('')\n  //         setImageLinkList([])\n  //         setReferenceLink('')\n  //         setReferenceLinkList([])\n  //         props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`)\n  //     }\n  // }\n  // const colors = [\n  //     'rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)',\n  //     'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', \n  //     'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)',  \n  //     'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'\n  // ]\n  // const colorsHTML = colors.map(c => <div onClick={() => setColor(c)} className={PFP.color-ins} style={{backgroundColor: c}} key={`PFC${c}`} />)\n  // const addSkills = () => {\n  //     let cleanedSkill = []\n  //     for (const word of skillName.split(' ')) {\n  //         if (word.length) cleanedSkill.push(word)\n  //     }\n  //     setSkillName(cleanedSkill.join(' '))\n  //     if (Number(skillCapacity)){\n  //         setSkillNameList(skillNameList.concat(skillName.toLowerCase()))\n  //         setSkillName('')\n  //         setSkillCapList(skillCapList.concat(Number(skillCapacity)))\n  //         setSkillCapacity('')\n  //         setSkillProposition(null)\n  //         setSkillSelected(null)\n  //     }\n  // }\n  // const removeSkill = (ind) => {\n  //     const newSkillNameList = []\n  //     for (const i in skillNameList) {\n  //         if (i !== ind) { newSkillNameList.push(skillNameList[i]) }\n  //     }\n  //     setSkillNameList(newSkillNameList)\n  //     const newSkillCapList = []\n  //     for (const i in skillCapList) {\n  //         if (i !== ind) { newSkillCapList.push(skillCapList[i]) }\n  //     }\n  //     setSkillCapList(newSkillCapList)\n  //     const newSkillProposition = []\n  //     for (const i in props.skillProposition) {\n  //         if (i !== ind) { newSkillProposition.push(props.skillProposition[i]) }\n  //     }\n  // }\n  // const removeImage = (ind) => {\n  //     const newImageLinkList = []\n  //     for (const i in imageLinkList) {\n  //         if (i !== ind) { newImageLinkList.push(imageLinkList[i]) }\n  //     }\n  //     setImageLinkList(newImageLinkList)\n  // }\n  // const addImage = () => {\n  //     if (imageLink.includes('https://') || imageLink.includes('http://')) {\n  //         setImageLinkList(imageLinkList.concat(imageLink))\n  //         setImageLink('')\n  //     }\n  // }\n  // const removeRL = (ind) => {\n  //     const newReferenceLinkList = []\n  //     for (const i in referenceLinkList) {\n  //         if (i !== ind) { newReferenceLinkList.push(referenceLinkList[i]) }\n  //     }\n  //     setReferenceLinkList(newReferenceLinkList)\n  // }\n  // const addRL = () => {\n  //     if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\n  //         setReferenceLinkList(referenceLinkList.concat(referenceLink))\n  //         setReferenceLink('')\n  //     }\n  // }\n  // const skillsHTML = () => {\n  //     let skillsHTML = []\n  //     for (const ind in skillNameList) {\n  //         skillsHTML.push(\n  //             <div className={PFP.PF-skill-wrapper} key={`PFS${skillNameList[ind]}`}>\n  //                 <div className={PFP.PF-skill-container}>\n  //                     <div className={PFP.PF-skill-name}>{skillNameList[ind]}</div>\n  //                     <div className={PFP.PF-skill-cap}>{skillCapList[ind]}</div>\n  //                 </div>\n  //                 <div className={PFP.PF-skill-remove} onClick={() => removeSkill(ind)}>x</div>\n  //             </div>\n  //         )\n  //     }\n  //     return skillsHTML\n  // }\n  // const skillContribution = () => {\n  //     if (!skillNameList.length) {\n  //         return <h4 className={PFP.PF-input-title} style={{opacity: 0.7}}>must add skill first</h4>\n  //     }\n  //     const handleSkillSelect = (i) => {\n  //         const skillArray = Array(skillNameList.length).fill(0)\n  //         skillArray[i] = 1\n  //         setSkillProposition(skillArray)\n  //         setSkillSelected(skillNameList[i])\n  //     }\n  //     const skillMap = []\n  //     for (const i in skillNameList) {\n  //         const skillClass = skillSelected === skillNameList[i] ?\n  //             'PFP.skill-selected' : 'PFP.skill-normal'\n  //         skillMap.push(\n  //             <h4 onClick={() => handleSkillSelect(i, skillNameList[i])} className={skillClass} key={`SKILL${i}`}>{skillNameList[i]}</h4>\n  //         )\n  //     }\n  //     return (\n  //         <div className={PFP.skills-container}>\n  //             {skillMap}\n  //         </div>\n  //     )\n  // }\n  // const imagesHTML = () => {\n  //     const allImages = []\n  //     for (const ind in imageLinkList) {\n  //         allImages.push(\n  //             <div className={PFP.PF-image-display-container} key={`IL${ind}`}>\n  //                 <img className={PFP.PF-image-display} src={imageLinkList[ind]} alt={`(${imageLinkList[ind]}) failed to load`} key={`IL${imageLinkList[ind]}`} />\n  //                 <div onClick={() => removeImage(ind)} className={PFP.PF-skill-remove} style={{height: '75px', lineHeight: '70px'}} >x</div>\n  //             </div>\n  //         )\n  //     }\n  //     return allImages.map(img => img)\n  // }\n  // const referenceLinksHTML = () => {\n  //     const allRL = []\n  //     for (const ind in referenceLinkList) {\n  //         allRL.push(\n  //             <div className={PFP.PF-link-container} key={`RL${ind}`}>\n  //                 <a href={referenceLinkList[ind]} className={PFP.PF-reference-link neutralize-link}>{referenceLinkList[ind].split('/')[2]}</a>\n  //                 <div onClick={() => removeRL(ind)} className={PFP.PF-skill-remove} style={{lineHeight: '30px'}}>x</div>\n  //             </div>\n  //         )\n  //     }\n  //     return allRL.map(rl => rl)\n  // }\n  // const groupCommType = () => {\n  //     const siteStats = websiteStats(groupContactLink.fields.value)\n  //     return (\n  //         <React.Fragment>\n  //             <a className={PFP.GCL-type} href={groupContactLink.fields.value} title={siteStats.title} style={{backgroundColor: siteStats.color}}><img className=\"GCL-image\" src={siteStats.icon} alt={siteStats.title} /></a>\n  //             <input className={PFP.PF-search-input-normal} id=\"PF-GC-Link\" {...groupContactLink.fields} style={{marginBottom: 0, borderColor: siteStats.color}} />\n  //         </React.Fragment>\n  //     )\n  // }\n  // const signInWarning = props.token ? null : (\n  //     <h3 className=\"warning-container\">must be signed in to add post</h3>\n  // )\n  // const onSuggestionClicked = (skill) => {\n  //     const skillToEnter = `${skill} `\n  //     setSkillName(skillToEnter)\n  // }\n  return __jsx(\"h1\", {\n    className: PFP.test,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, \"PostFormPage.js release branch . Today is Wednesday.\") // <div className={PFP.post-form0-container}>\n  //     <div className=\"navbar-height\" />\n  //     {signInWarning}\n  //     <form onSubmit={(e) => handleSubmit(e)}>\n  //         <div className={PFP.post-form0-form}>\n  //             <h1 className=\"pp-form-title\" style={{textAlign: 'start', marginLeft: 0}}>create post</h1>\n  //             <InputHeader info={false} title=\"title\" color=\"white\" inputFor=\"PF-title\" />\n  //             <input className={PFP.PF-search-input} id=\"PF-title\" {...title.fields} />\n  //             <InputHeader info={true} title=\"description\" color=\"white\" inputFor=\"PF-description\" >\n  //                 <ul style={{margin: 0}}>\n  //                     <li>any links starting with (https://) or (http://) get decorated like this <a href=\"https://www.unilous.com/post-form/\" className=\"p-link neutralize-link\">http://decorated-link.com</a></li>\n  //                 </ul>\n  //             </InputHeader>\n  //             <textarea className={PFP.PF-search-input} id=\"PF-description\" {...description.fields}  style={{height: '100px', width: '100%'}} />\n  //             <InputHeader info={true} title=\"color\" color=\"white\" inputFor=\"\">\n  //                 <ul style={{margin: 0}}>\n  //                     <li>used sparingly to decorate the post</li>\n  //                 </ul>\n  //             </InputHeader>\n  //             <div className={PFP.PF-display-color} style={{backgroundColor: pallette.color}} >\n  //                 <div className={PFP.PF-display-part} style={{backgroundColor: pallette.color, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>primary</h4></div>\n  //                 <div className={PFP.PF-display-part} style={{backgroundColor: pallette.higherColor, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>secondary</h4></div>\n  //             </div>\n  //             <div className={PFP.PF-input-colors}>\n  //                 {colorsHTML}\n  //             </div>\n  //             <InputHeader info={true} title=\"skills\" color=\"white\" inputFor=\"PF-skillName\">\n  //                 <p style={{margin: 0, marginBottom: '5px'}}>skills needed to execute the project</p>\n  //                 <p style={{margin: 0, marginBottom: '5px'}}>amount of people needed per skill</p>\n  //             </InputHeader>\n  //             <div>\n  //                 <div className={PFP.PF-skill-fields}>\n  //                     <input className={PFP.PF-search-input} placeholder=\"skill name\" id=\"PF-skillName\" value={skillName} onChange={(e) => setSkillName(e.target.value)} type=\"text\" style={{marginBottom: 0}} />\n  //                     <input className={PFP.PF-search-input} placeholder=\"amount of help\" value={skillCapacity} onChange={(e) => setSkillCapacity(e.target.value)} type=\"number\" style={{marginBottom: 0}} />\n  //                     <div className={PFP.PF-skill-sugg-container}>\n  //                         <SkillSugg query={skillName} onSuggestionClicked={onSuggestionClicked} style={{gridColumn: '1/2'}} />\n  //                     </div>\n  //                 </div>\n  //                 <h4 onClick={() => addSkills()} className={PFP.PF-field-submit standard-hover\">add skill</h4>               \n  //             </div>\n  //             {skillsHTML().map(s => s)}\n  //             <InputHeader info={true} title=\"contribution\" color=\"white\" inputFor=\"\">\n  //                 <p style={{margin: 0, marginBottom: '5px'}}>skill you contribute to the project</p>\n  //             </InputHeader>\n  //             {skillContribution()}\n  //             <InputHeader info={true} title=\"group/contact link\" color=\"white\" inputFor=\"PF-GC-Link\">\n  //                 <p style={{margin: 0, marginBottom: '5px'}}>link shown to users who have been accepted to join the project</p>\n  //                 <ul style={{margin: 0}}>\n  //                     <li>group links recommended: <strong>Slack</strong>, <strong>Trello</strong>, <strong>Discord</strong>, or <strong>WhatsApp</strong></li>\n  //                 </ul>\n  //             </InputHeader>\n  //             <div className={PFP.GCL-input}>\n  //                 {groupCommType()}\n  //             </div>\n  //             <InputHeader info={false} title=\"images\" color=\"white\" inputFor=\"PF-imageLinks\" />\n  //             <input className={PFP.PF-search-input} type=\"url\" placeholder=\"image link\" id=\"PF-imageLinks\" value={imageLink} onChange={(e) => setImageLink(e.target.value)} style={{marginBottom: 0}} />\n  //             <h4 onClick={() => addImage()} className={PFP.PF-field-submit standard-hover}>add image</h4>\n  //             <div className={PFP.PF-images-container}>\n  //                 {imagesHTML()}\n  //             </div>\n  //             <InputHeader info={false} title=\"links\" color=\"white\" inputFor=\"PF-referenceLinks\" />\n  //             <input className={PFP.PF-search-input} type=\"url\" id=\"PF-referenceLinks\" value={referenceLink} onChange={(e) => setReferenceLink(e.target.value)} style={{marginBottom: 0}} />\n  //             <h4 onClick={() => addRL()} className={PFP.PF-field-submit standard-hover}>add link</h4>\n  //             {referenceLinksHTML()}\n  //         </div>\n  //         <button type=\"submit\" className={PFP.PF-submit standard-hover}><h2 style={{margin: '5px'}}>create post</h2></button>\n  //     </form>\n  // </div>\n  ;\n}; // PostFormPage = withRouter(PostFormPage)\n// const mapStateToProps = (state) => {\n// \treturn {\n//         skillProposition: state.skillProposition,\n//         currentUser: state.currentUser,\n//         token: state.token\n// \t}\n// }\n// export default connect(\n//     mapStateToProps,\n//     { setAlert, resetAlert }\n// )(PostFormPage)\n\n\nexport default PostFormPage; // uses standard-hover from userUtilities\n// what is pp-form-title?","map":{"version":3,"sources":["/home/oliver/Documents/projects/Unilous-front-end-dev-1/pages/PostFormPage.js"],"names":["React","PFP","PostFormPage","props","test"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,qCAAhB;;AAEA,IAAIC,YAAY,GAAIC,KAAD,IAAW;AAC1B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACI;AAAI,IAAA,SAAS,EAAEF,GAAG,CAACG,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DADJ,CAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArEJ;AAuEH,CAjUD,C,CAmUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeF,YAAf,C,CAEA;AACA","sourcesContent":["import React from 'react';\nimport PFP from '../styles/pages/postForm.module.css';\n\nlet PostFormPage = (props) => {\n    // const title = useField('text')\n    // const description = useField('text')\n    // const [color, setColor] = useState(null)\n    // const groupContactLink = useField('url')\n\n    // const [skillName, setSkillName] = useState('')\n    // const [skillNameList, setSkillNameList] = useState([])\n    // const [skillCapacity, setSkillCapacity] = useState('')\n    // const [skillCapList, setSkillCapList] = useState([])\n    // const [imageLink, setImageLink] = useState('')\n    // const [imageLinkList, setImageLinkList] = useState([])\n    // const [referenceLink, setReferenceLink] = useState('')\n    // const [referenceLinkList, setReferenceLinkList] = useState([])\n\n    // const [skillProposition, setSkillProposition] = useState(null)\n    // const [skillSelected, setSkillSelected] = useState(null)\n    // // This is a test for form validation\n    // const handleError = (e) => {\n    //     const message = e.message\n    //     if (message.includes('Response not successful')) {\n    //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n    //         return null \n    //     }\n    //     if (message.includes('Path `title` (')) {\n    //         triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert)\n    //         return null\n    //     }\n    //     if (message.includes('dup key: { title')) {\n    //         triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert)\n    //         return null\n    //     }\n    //     if (message.includes('duplicate description')) {\n    //         triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert)\n    //         return null\n    //     }\n    //     if (message.includes('minimum allowed length')) {\n    //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert)\n    //         return null\n    //     }\n    //     if (message.includes('Path `description` (')) {\n    //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert)\n    //         return null\n    //     }\n    //     if (message.includes('duplicate contactLink')) {\n    //         triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert)\n    //         return null\n    //     }\n    // }\n    // const [createPost] = useMutation( CREATE_POST, {\n    //     onError: handleError\n    // })\n    // const pallette = color ? palletteGenerator(color).colorPallette : {color: null, heigherColor: null}\n    // const handleSubmit = async (e) => {\n    //     e.preventDefault()\n    //     if (!props.token) {\n    //         triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\n    //         return null\n    //     }\n    //     if (!skillNameList.length || !groupContactLink.fields.value.length) {\n    //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n    //         return null\n    //     }\n    //     let cleanedTitle = []\n    //     for (const word of title.fields.value.split(' ')) {\n    //         if (word.length) cleanedTitle.push(word)\n    //     }\n    //     const postCreated = await createPost({\n    //         variables: {\n    //             title: cleanedTitle.join(' '),\n    //             user: props.currentUser._id,\n    //             skillNames: skillNameList,\n    //             skillCapacities: skillCapList,\n    //             skillFills: skillProposition,\n    //             description: description.fields.value,\n    //             contactLink: groupContactLink.fields.value,\n    //             color: color,\n    //             imageLinks: imageLinkList,\n    //             referenceLinks: referenceLinkList\n    //         }\n    //     })\n    //     if (postCreated) {\n    //         title.reset()\n    //         description.reset()\n    //         groupContactLink.reset()\n    //         setSkillName('')\n    //         setSkillNameList([])\n    //         setSkillCapacity('')\n    //         setSkillCapList([])\n    //         setImageLink('')\n    //         setImageLinkList([])\n    //         setReferenceLink('')\n    //         setReferenceLinkList([])\n    //         props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`)\n    //     }\n    // }\n    // const colors = [\n    //     'rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)',\n    //     'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', \n    //     'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)',  \n    //     'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'\n    // ]\n    // const colorsHTML = colors.map(c => <div onClick={() => setColor(c)} className={PFP.color-ins} style={{backgroundColor: c}} key={`PFC${c}`} />)\n    // const addSkills = () => {\n    //     let cleanedSkill = []\n    //     for (const word of skillName.split(' ')) {\n    //         if (word.length) cleanedSkill.push(word)\n    //     }\n    //     setSkillName(cleanedSkill.join(' '))\n    //     if (Number(skillCapacity)){\n    //         setSkillNameList(skillNameList.concat(skillName.toLowerCase()))\n    //         setSkillName('')\n    //         setSkillCapList(skillCapList.concat(Number(skillCapacity)))\n    //         setSkillCapacity('')\n    //         setSkillProposition(null)\n    //         setSkillSelected(null)\n    //     }\n    // }\n    // const removeSkill = (ind) => {\n    //     const newSkillNameList = []\n    //     for (const i in skillNameList) {\n    //         if (i !== ind) { newSkillNameList.push(skillNameList[i]) }\n    //     }\n    //     setSkillNameList(newSkillNameList)\n    //     const newSkillCapList = []\n    //     for (const i in skillCapList) {\n    //         if (i !== ind) { newSkillCapList.push(skillCapList[i]) }\n    //     }\n    //     setSkillCapList(newSkillCapList)\n    //     const newSkillProposition = []\n    //     for (const i in props.skillProposition) {\n    //         if (i !== ind) { newSkillProposition.push(props.skillProposition[i]) }\n    //     }\n    // }\n    \n    // const removeImage = (ind) => {\n    //     const newImageLinkList = []\n    //     for (const i in imageLinkList) {\n    //         if (i !== ind) { newImageLinkList.push(imageLinkList[i]) }\n    //     }\n    //     setImageLinkList(newImageLinkList)\n    // }\n    \n    // const addImage = () => {\n    //     if (imageLink.includes('https://') || imageLink.includes('http://')) {\n    //         setImageLinkList(imageLinkList.concat(imageLink))\n    //         setImageLink('')\n    //     }\n    // }\n\n    // const removeRL = (ind) => {\n    //     const newReferenceLinkList = []\n    //     for (const i in referenceLinkList) {\n    //         if (i !== ind) { newReferenceLinkList.push(referenceLinkList[i]) }\n    //     }\n    //     setReferenceLinkList(newReferenceLinkList)\n    // }\n\n    // const addRL = () => {\n    //     if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\n    //         setReferenceLinkList(referenceLinkList.concat(referenceLink))\n    //         setReferenceLink('')\n    //     }\n    // }\n\n    // const skillsHTML = () => {\n    //     let skillsHTML = []\n    //     for (const ind in skillNameList) {\n    //         skillsHTML.push(\n    //             <div className={PFP.PF-skill-wrapper} key={`PFS${skillNameList[ind]}`}>\n    //                 <div className={PFP.PF-skill-container}>\n    //                     <div className={PFP.PF-skill-name}>{skillNameList[ind]}</div>\n    //                     <div className={PFP.PF-skill-cap}>{skillCapList[ind]}</div>\n    //                 </div>\n    //                 <div className={PFP.PF-skill-remove} onClick={() => removeSkill(ind)}>x</div>\n    //             </div>\n    //         )\n    //     }\n    //     return skillsHTML\n    // }\n\n    // const skillContribution = () => {\n    //     if (!skillNameList.length) {\n    //         return <h4 className={PFP.PF-input-title} style={{opacity: 0.7}}>must add skill first</h4>\n    //     }\n\n    //     const handleSkillSelect = (i) => {\n    //         const skillArray = Array(skillNameList.length).fill(0)\n    //         skillArray[i] = 1\n    //         setSkillProposition(skillArray)\n    //         setSkillSelected(skillNameList[i])\n    //     }\n\n    //     const skillMap = []\n    //     for (const i in skillNameList) {\n    //         const skillClass = skillSelected === skillNameList[i] ?\n    //             'PFP.skill-selected' : 'PFP.skill-normal'\n    //         skillMap.push(\n    //             <h4 onClick={() => handleSkillSelect(i, skillNameList[i])} className={skillClass} key={`SKILL${i}`}>{skillNameList[i]}</h4>\n    //         )\n    //     }\n\n    //     return (\n    //         <div className={PFP.skills-container}>\n    //             {skillMap}\n    //         </div>\n    //     )\n    // }\n\n    // const imagesHTML = () => {\n    //     const allImages = []\n    //     for (const ind in imageLinkList) {\n    //         allImages.push(\n    //             <div className={PFP.PF-image-display-container} key={`IL${ind}`}>\n    //                 <img className={PFP.PF-image-display} src={imageLinkList[ind]} alt={`(${imageLinkList[ind]}) failed to load`} key={`IL${imageLinkList[ind]}`} />\n    //                 <div onClick={() => removeImage(ind)} className={PFP.PF-skill-remove} style={{height: '75px', lineHeight: '70px'}} >x</div>\n    //             </div>\n    //         )\n    //     }\n    //     return allImages.map(img => img)\n    // }\n\n    // const referenceLinksHTML = () => {\n    //     const allRL = []\n    //     for (const ind in referenceLinkList) {\n    //         allRL.push(\n    //             <div className={PFP.PF-link-container} key={`RL${ind}`}>\n    //                 <a href={referenceLinkList[ind]} className={PFP.PF-reference-link neutralize-link}>{referenceLinkList[ind].split('/')[2]}</a>\n    //                 <div onClick={() => removeRL(ind)} className={PFP.PF-skill-remove} style={{lineHeight: '30px'}}>x</div>\n    //             </div>\n    //         )\n    //     }\n    //     return allRL.map(rl => rl)\n    // }\n    // const groupCommType = () => {\n    //     const siteStats = websiteStats(groupContactLink.fields.value)\n    //     return (\n    //         <React.Fragment>\n    //             <a className={PFP.GCL-type} href={groupContactLink.fields.value} title={siteStats.title} style={{backgroundColor: siteStats.color}}><img className=\"GCL-image\" src={siteStats.icon} alt={siteStats.title} /></a>\n    //             <input className={PFP.PF-search-input-normal} id=\"PF-GC-Link\" {...groupContactLink.fields} style={{marginBottom: 0, borderColor: siteStats.color}} />\n    //         </React.Fragment>\n    //     )\n    // }\n    // const signInWarning = props.token ? null : (\n    //     <h3 className=\"warning-container\">must be signed in to add post</h3>\n    // )\n    // const onSuggestionClicked = (skill) => {\n    //     const skillToEnter = `${skill} `\n    //     setSkillName(skillToEnter)\n    // }\n    return (\n        <h1 className={PFP.test}>PostFormPage.js release branch . Today is Wednesday.</h1>\n        // <div className={PFP.post-form0-container}>\n        //     <div className=\"navbar-height\" />\n        //     {signInWarning}\n        //     <form onSubmit={(e) => handleSubmit(e)}>\n        //         <div className={PFP.post-form0-form}>\n        //             <h1 className=\"pp-form-title\" style={{textAlign: 'start', marginLeft: 0}}>create post</h1>\n        //             <InputHeader info={false} title=\"title\" color=\"white\" inputFor=\"PF-title\" />\n        //             <input className={PFP.PF-search-input} id=\"PF-title\" {...title.fields} />\n        //             <InputHeader info={true} title=\"description\" color=\"white\" inputFor=\"PF-description\" >\n        //                 <ul style={{margin: 0}}>\n        //                     <li>any links starting with (https://) or (http://) get decorated like this <a href=\"https://www.unilous.com/post-form/\" className=\"p-link neutralize-link\">http://decorated-link.com</a></li>\n        //                 </ul>\n        //             </InputHeader>\n        //             <textarea className={PFP.PF-search-input} id=\"PF-description\" {...description.fields}  style={{height: '100px', width: '100%'}} />\n        //             <InputHeader info={true} title=\"color\" color=\"white\" inputFor=\"\">\n        //                 <ul style={{margin: 0}}>\n        //                     <li>used sparingly to decorate the post</li>\n        //                 </ul>\n        //             </InputHeader>\n        //             <div className={PFP.PF-display-color} style={{backgroundColor: pallette.color}} >\n        //                 <div className={PFP.PF-display-part} style={{backgroundColor: pallette.color, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>primary</h4></div>\n        //                 <div className={PFP.PF-display-part} style={{backgroundColor: pallette.higherColor, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>secondary</h4></div>\n        //             </div>\n        //             <div className={PFP.PF-input-colors}>\n        //                 {colorsHTML}\n        //             </div>\n        //             <InputHeader info={true} title=\"skills\" color=\"white\" inputFor=\"PF-skillName\">\n        //                 <p style={{margin: 0, marginBottom: '5px'}}>skills needed to execute the project</p>\n        //                 <p style={{margin: 0, marginBottom: '5px'}}>amount of people needed per skill</p>\n        //             </InputHeader>\n        //             <div>\n        //                 <div className={PFP.PF-skill-fields}>\n        //                     <input className={PFP.PF-search-input} placeholder=\"skill name\" id=\"PF-skillName\" value={skillName} onChange={(e) => setSkillName(e.target.value)} type=\"text\" style={{marginBottom: 0}} />\n        //                     <input className={PFP.PF-search-input} placeholder=\"amount of help\" value={skillCapacity} onChange={(e) => setSkillCapacity(e.target.value)} type=\"number\" style={{marginBottom: 0}} />\n        //                     <div className={PFP.PF-skill-sugg-container}>\n        //                         <SkillSugg query={skillName} onSuggestionClicked={onSuggestionClicked} style={{gridColumn: '1/2'}} />\n        //                     </div>\n        //                 </div>\n        //                 <h4 onClick={() => addSkills()} className={PFP.PF-field-submit standard-hover\">add skill</h4>               \n        //             </div>\n        //             {skillsHTML().map(s => s)}\n        //             <InputHeader info={true} title=\"contribution\" color=\"white\" inputFor=\"\">\n        //                 <p style={{margin: 0, marginBottom: '5px'}}>skill you contribute to the project</p>\n        //             </InputHeader>\n        //             {skillContribution()}\n        //             <InputHeader info={true} title=\"group/contact link\" color=\"white\" inputFor=\"PF-GC-Link\">\n        //                 <p style={{margin: 0, marginBottom: '5px'}}>link shown to users who have been accepted to join the project</p>\n        //                 <ul style={{margin: 0}}>\n        //                     <li>group links recommended: <strong>Slack</strong>, <strong>Trello</strong>, <strong>Discord</strong>, or <strong>WhatsApp</strong></li>\n        //                 </ul>\n        //             </InputHeader>\n        //             <div className={PFP.GCL-input}>\n        //                 {groupCommType()}\n        //             </div>\n        //             <InputHeader info={false} title=\"images\" color=\"white\" inputFor=\"PF-imageLinks\" />\n        //             <input className={PFP.PF-search-input} type=\"url\" placeholder=\"image link\" id=\"PF-imageLinks\" value={imageLink} onChange={(e) => setImageLink(e.target.value)} style={{marginBottom: 0}} />\n        //             <h4 onClick={() => addImage()} className={PFP.PF-field-submit standard-hover}>add image</h4>\n        //             <div className={PFP.PF-images-container}>\n        //                 {imagesHTML()}\n        //             </div>\n        //             <InputHeader info={false} title=\"links\" color=\"white\" inputFor=\"PF-referenceLinks\" />\n        //             <input className={PFP.PF-search-input} type=\"url\" id=\"PF-referenceLinks\" value={referenceLink} onChange={(e) => setReferenceLink(e.target.value)} style={{marginBottom: 0}} />\n        //             <h4 onClick={() => addRL()} className={PFP.PF-field-submit standard-hover}>add link</h4>\n        //             {referenceLinksHTML()}\n        //         </div>\n        //         <button type=\"submit\" className={PFP.PF-submit standard-hover}><h2 style={{margin: '5px'}}>create post</h2></button>\n        //     </form>\n        // </div>\n    )\n}\n\n// PostFormPage = withRouter(PostFormPage)\n\n// const mapStateToProps = (state) => {\n// \treturn {\n//         skillProposition: state.skillProposition,\n//         currentUser: state.currentUser,\n//         token: state.token\n// \t}\n// }\n// export default connect(\n//     mapStateToProps,\n//     { setAlert, resetAlert }\n// )(PostFormPage)\n\nexport default PostFormPage;\n\n// uses standard-hover from userUtilities\n// what is pp-form-title?"]},"metadata":{},"sourceType":"module"}